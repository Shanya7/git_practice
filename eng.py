
from flask import Flask, jsonify
from flask import abort
from flask import make_response
from flask import request
from flask import url_for


app = Flask(__name__)

words = [
    {
        'id': 1,
        'title': u'Nuclear power',
        'description': u'Power generated by a nuclear reactor', 
        'use example': u'New government insists that we need nuclear power only to generate electricity'
    },
    {
        'id': 2,
        'title': u'Solar panel',
        'description': u'A device that changes energy from the sun into electricity', 
        'use example': u'Solar panels are becoming more and more popular among the people living in this area'
    },
    {
        'id': 3,
        'title': u'Miss the point',
        'description': u'Not understand the most important thing about something', 
        'use example': u"That's not what I meant - you missed the point of everything I just said "
    },
    {
        'id': 4,
        'title': u'Mother tongue',
        'description': u'The first language that you learn when you are a baby', 
        'use example': u"My mother tongue is Ukrainian"
    },
{
        'id': 5,
        'title': u'Diligent',
        'description': u'Careful and using a lot of effort',
        'use example': u"I consider myself a very diligent worker"
    },
{
        'id': 6,
        'title': u'Dedicated',
        'description': u'Believing that something is very important and giving a lot of time and energy to it',
        'use example': u"I am an enthusiastic and dedicated professional with extensive experience in my field of work"
    },
{
        'id': 7,
        'title': u'Resourceful',
        'description': u'Skilled at solving problems and making decisions on your own',
        'use example': u"She's a quite a resourceful manager"
    },
{
        'id': 8,
        'title': u'A band-aid',
        'description': u'A small piece of sticky cloth or plastic that you use to cover and protect a cut in the skin',
        'use example': u"Your finger bleeds, let me get you a band-aid"
    },
{
        'id': 9,
        'title': u'Gauze',
        'description': u'A very thin, light cloth, used to make bandages, to cover cuts',
        'use example': u"Right now he could use antibiotics, painkillers, and some sterile gauze before going to the doctor"
    },
{
        'id': 10,
        'title': u'Flavour',
        'description': u'How food or drink tastes',
        'use example': u"They sell 25 different flavours of ice cream"
    },
{
        'id': 11,
        'title': u'Bitter',
        'description': u'With an unpleasantly sharp taste',
        'use example': u"This drink has a very bitter taste"
    },
{
        'id': 12,
        'title': u'Sour',
        'description': u'Having a sharp taste or smell, like a lemon, and not sweet',
        'use example': u"I put some sour cream in the soup"
    },
{
        'id': 13,
        'title': u'A raincoat',
        'description': u'A coat that protects the person against rain',
        'use example': u"They sell very bright raincoats in different colors"
    },
{
        'id': 14,
        'title': u'A puddle',
        'description': u'A small pool of liquid on the ground, especially from rain',
        'use example': u"Not only kids like jumping in puddles after a warm rain"
    },
{
        'id': 15,
        'title': u'Waterproof',
        'description': u'Not allowing water to go through',
        'use example': u"You should wear waterproof boots when you go hiking"
    },
{
        'id': 16,
        'title': u'Mild weather',
        'description': u'Not very cold or not as cold as usual; pleasant',
        'use example': u"You will enjoy sunny and mild weather all year which makes Barcelona a perfect place to visit anytime"
    },
{
        'id': 17,
        'title': u'Changeable',
        'description': u'Often changing',
        'use example': u"The weather in spring is often changeable, so you don't know what to wear"
    },
{
        'id': 18,
        'title': u'Breeze',
        'description': u'A light and pleasant wind',
        'use example': u"There's quite a fresh breeze today"
    },
{
        'id': 19,
        'title': u'The environment',
        'description': u'The air, water, and land in or on which people, animals, and plants live',
        'use example': u"We're not doing enough to protect the environment"
    },
{
        'id': 20,
        'title': u'Pollution',
        'description': u'Damage caused to water, air, etc. by harmful substances or waste',
        'use example': u"Can exhaust in the main reason for the city's pollution"
    },
{
        'id': 21,
        'title': u'Be surprised',
        'description': u'Feeling or showing surprise because something has happened that you did not expect',
        'use example': u"We were very surprised at the result of your test"
    },
{
        'id': 22,
        'title': u'Take somebody aback',
        'description': u'Surprise or shock someone so much that they do not know how to behave for a short time',
        'use example': u"I was a really taken aback at that news"
    },
{
        'id': 23,
        'title': u'Raise eyebrows',
        'description': u'Show surprise by moving your eyebrows, or show interest',
        'use example': u"The news of his appointment raised some eyebrows"
    }
]

@app.route('/todo/api/v1.0/words', methods=['GET'])
def get_words():
    return jsonify({'words': words})


@app.route('/todo/api/v1.0/words/<int:word_id>', methods=['GET'])
def get_word(word_id):
    word = list(filter(lambda t: t['id'] == word_id, words))
    if len(word) == 0:
        abort(404)
    return jsonify({'word': word[0]})

@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}), 404)

#POST
@app.route('/todo/api/v1.0/words', methods=['POST'])
def create_word():
    if not request.json or not 'title' in request.json:
        abort(400)
    word = {
        'id': words[-1]['id'] + 1,
        'title': request.json['title'],
        'description': request.json.get('description', ""),
        'use example': ''
    }
    word.append(word)
    return jsonify({'word': word}), 201

@app.route('/todo/api/v1.0/words/<int:word_id>', methods=['PUT'])
def update_word(word_id):
    word = list(filter(lambda t: t['id'] == word_id, words))
    if len(word) == 0:
        abort(404)
    if not request.json:
        abort(400)
    if 'title' in request.json and type(request.json['title']) != unicode:
        abort(400)
    if 'description' in request.json and type(request.json['description']) is not unicode:
        abort(400)
    if 'use example' in request.json and type(request.json['use example']) is not bool:
        abort(400)
    word[0]['title'] = request.json.get('title', word[0]['title'])
    word[0]['description'] = request.json.get('description', word[0]['description'])
    word[0]['Use Example'] = request.json.get('use example', word[0]['use example'])
    return jsonify({'task': word[0]})

@app.route('/todo/api/v1.0/words/<int:task_id>', methods=['DELETE'])
def delete_task(word_id):
    word = filter(lambda t: t['id'] == word_id, words)
    if len(word) == 0:
        abort(404)
    words.remove(word[0])
    return jsonify({'result': True})


def make_public_task(word):
    new_word = {}
    for field in word:
        if field == 'id':
            new_word['uri'] = url_for('get_word', word_id=word['id'], _external=True)
        else:
            new_word[field] = word[field]
    return new_word
    

if __name__ == '__main__':
    app.run(debug=True)
